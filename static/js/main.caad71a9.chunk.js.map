{"version":3,"sources":["components/Navigation.js","components/Experience.js","components/About.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","Item","href","TabPane","Tabs","Experience","className","tabPosition","tab","key","React","Component","About","strings","typeSpeed","Footer","type","GithubFilled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PA4BeA,EAzBH,WACR,OAEI,kBAAC,IAAD,KACI,kBAAC,IAAWC,KAAZ,KACI,uBAAGC,KAAK,KAAR,SAEJ,kBAAC,IAAWD,KAAZ,KACI,uBAAGC,KAAK,KAAR,eAEJ,kBAAC,IAAWD,KAAZ,KACI,uBAAGC,KAAK,KAAR,cAEJ,kBAAC,IAAWD,KAAZ,KACI,uBAAGC,KAAK,KAAR,YAEJ,kBAAC,IAAWD,KAAZ,KACI,uBAAGC,KAAK,KAAR,c,yCCjBRC,EAAYC,IAAZD,QA+EOE,E,uKA5EP,OACI,yBAAKC,UAAU,cACX,kBAAC,IAAD,CAAMC,YAAY,QACd,kBAACJ,EAAD,CAASK,IAAI,aAAaC,IAAI,KAA9B,klIAoDA,kBAACN,EAAD,CAASK,IAAI,SAASC,IAAI,KACtB,4BACI,wIACA,mJACA,gFACA,oHAGR,kBAACN,EAAD,CAASK,IAAI,YAAYC,IAAI,KACzB,qEAA0C,6BAA1C,gBAEA,sEAA2C,6BAA3C,8B,GApECC,IAAMC,W,kBCuBhBC,E,uKArBP,OACI,yBAAKN,UAAU,SACX,4BACI,kBAAC,IAAD,CACIO,QAAS,CAAC,qEAAkD,+CAC5DC,UAAW,MAGnB,+FACoE,6BADpE,sJ,GAXIJ,IAAMC,W,kBCkBXI,EAjBA,WACX,OACI,yBAAKT,UAAU,WAEX,uBAAGJ,KAAK,kCACJ,kBAAC,IAAD,CAAQc,KAAK,WAAb,eAIJ,uBAAGd,KAAK,+BAA+BI,UAAU,WAC7C,kBAACW,EAAA,EAAD,SCIDC,MAXf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.caad71a9.chunk.js","sourcesContent":["import React from 'react'\nimport { Breadcrumb } from 'antd';\n\nconst Nav = () => {\n    return (\n\n        <Breadcrumb>\n            <Breadcrumb.Item>\n                <a href=\"#\">Ming</a>\n            </Breadcrumb.Item>\n            <Breadcrumb.Item>\n                <a href=\"#\">Experience</a>\n            </Breadcrumb.Item>\n            <Breadcrumb.Item>\n                <a href=\"#\">Education</a>\n            </Breadcrumb.Item>\n            <Breadcrumb.Item>\n                <a href=\"#\">Gallery</a>\n            </Breadcrumb.Item>\n            <Breadcrumb.Item>\n                <a href=\"#\">Contact</a>\n            </Breadcrumb.Item>\n        </Breadcrumb>\n\n\n    )\n}\n\nexport default Nav","import React from 'react'\nimport { Tabs } from 'antd';\n\nconst { TabPane } = Tabs;\nclass Experience extends React.Component {\n    render() {\n        return (\n            <div className='experience'>\n                <Tabs tabPosition='left'>\n                    <TabPane tab=\"Experience\" key=\"1\">\n                        Wealthfront Inc., Palo Alto, CA           \t\t\t\t\t\t Aug. 2016 ‚Äì May. 2018\n                        UI/Web Developer\n                        Description: Wealthfront Inc. is an automated investment service firm which helps people earn more interest on their cash and offers advice about how to manage savings.  I joined the front end team to help rebuild specific sections in React.js.\n\n                        ‚óè\tParticipate in developing and maintaining ‚ÄòAccount Transaction‚Äô on the website. Implemented the layouts and filter functions with HTML5, CSS3, JavaScript and React.js.\n                        ‚óè\tClosely work with the graphic design and user experience team to ensure the industry standards are being used.\n                        ‚óè\tUsed CSS Flexbox to position the transaction entries and other basic elements on webpages.\n                        ‚óè\tCreated and styled basic layout and forms with Bootstrap and implemented responsive web design with CSS media query.\n                        ‚óè\tWrote highly reusable CSS components for different sections on the website.\n                        ‚óè\tImported third-party libraries such as Font-Awesome to make various icons and ensured the design style stayed the same.\n                        ‚óè\tRebuild the JavaScript part of the website from jQuery to React.js with high-quality maintainable UI components and ensure a consistent visual design across various apps.\n                        ‚óè\tUsed React-Router to implement different content updates without refreshing the DOM and the whole page.\n                        ‚óè\tBuilt AJAX module by axios to request data from the SQL database by working with backend developers.\n                        ‚óè\tUsed Chrome DevTools and Jest for testing and debugging.\n                        ‚óè\tImplemented Gulp.js as tasks runner, Webpack.js as a module bundler to deploy the components.\n                        ‚óè\tManaged code and collaborated across the team by Git.\n                        ‚óè\tWorked in the Scrum process and completed tasks in Sprints Used JIRA to keep track of outstanding bugs to reduce downtime and increase productivity.\n                        Environment: HTML, CSS, React.js & Redux, jQuery, Bootstrap, AJAX, Postman, SQL, Git\n\n\n\n                        Tiffany & Co., New York City, NY           \t\t\t\t\tJun. 2015 ‚Äì Aug. 2016\n                        Front End Developer\n                        Description: Tiffany & Co. is a high-end American retailer known for fine jewelry, china & silver, plus wedding registry. I joined the front-end team to help build internal web applications for tracking order detail.\n\n                        ‚óè\tInvolved in all aspects of web developing including designing, maintaining, testing and debugging.\n                        ‚óè\tParticipated in developing dynamic prototypes by using HTML5, CSS3, and JavaScript from scratch to accomplish the business requirements.\n                        ‚óè\tCreated navigation bar, drop-down menus and animation effect by using jQuery and Bootstrap.\n                        ‚óè\tAdjusted layout by CSS Flexbox and Bootstrap grid system that meets cross-device compatibility.\n                        ‚óè\tResponsible for both mobile‚Äôs web responsive design and desktop pages.\n                        ‚óè\tDeveloped modules to receive data using AJAX, JSON, and XML.\n                        ‚óè\tImproved accessibility and SEO (Search Engine Optimization) with HTML metadata and headers.\n                        ‚óè\tResponsible for code optimization and fix the cross-browser compatibility for IE, Chrome, Safari, and Firefox.\n                        Environment: HTML, CSS, JavaScript, Bootstrap, jQuery, AJAX, Jest, Git\n\n\n\n                        The Vitamin Shoppe, Secaucus, NJ            \t\t\t\t\tDec. 2014 ‚Äì Jun. 2015\n                        Front End Developer\n                        Description: The Vitamin Shoppe is a New Jersey-based retailer of nutritional supplements. I was in front end team to maintain the periodical update of products on the website.\n\n                        ‚óè\tDesigned website framework using HTML5, CSS3, JavaScript, jQuery, Bootstrap.\n                        ‚óè\tUsed Sass as a CSS preprocessor to keep CSS files more organized and easier to manage.\n                        ‚óè\tDeveloped CSS templates to make codes more reusable\n                        ‚óè\tImplemented special effects on the web pages and achieved with jQuery plugins.\n                        ‚óè\tIncreased website performance by refactoring HTML, CSS, and JavaScript to follow optimization standards.\n                        ‚óè\tInvolved in cross-browser testing in IE, Firefox, Chrome, Safari to help with finding potential bugs.\n                        ‚óè\tWorked closely with the UX team to improve user experience and QA team to fix cross-browser compatibility issues and other defects reported.\n                        Environment: HTML, CSS, JavaScript, Bootstrap, jQuery, AJAX, XML, Git\n\n                </TabPane>\n                    <TabPane tab=\"Skills\" key=\"2\">\n                        <ul>\n                            <li> Programming Languages: JavaScript (ES6), HTML5, CSS/CSS3(SASS), Python, SQL (MySQL, PostgreSQL, SQLite)</li>\n                            <li>Web Development: React.js & Redux, Node.js & Express, jQuery, Lodash, Bootstrap, axios, D3.js Gulp.js, Jest, Enzyme</li>\n                            <li>Dev-Ops: Git, NPM, AWS, Heroku, Dockers, MongoDB</li>\n                            <li>Tools: Visual Studio Code, Atom, PyCharm, Sublime, Postman, Chrome Developer Tools</li>\n                        </ul>\n                    </TabPane>\n                    <TabPane tab=\"Education\" key=\"3\">\n                        <h3>Fordham University, Master of Science <br />\n                            Data Science</h3>\n                        <h3>Huzhou University, Bachelor of Science <br />\n                              Applied Mathematics</h3>\n\n                    </TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Experience\n","import React from 'react'\nimport Typed from 'react-typed';\n\nclass About extends React.Component {\n\n    render() {\n        return (\n            <div className=\"about\">\n                <h1>\n                    <Typed\n                        strings={[' Hi, I am Ming Chen!  Welcome to my page.üñ• üòÑ', ' This site is based on React and Ant Design']}\n                        typeSpeed={60}\n                    />\n                </h1>\n                <h4>\n                    Hi I am Mark. I am currently a Software Engineer at Cognac Sys. <br />\n                I graduated from Fordham University in Master of Science program.\n                I am always excited to face new challenges and explore newest\n                    technologies.\n                </h4>\n            </div>\n        );\n    }\n}\n\n\n\nexport default About","import React from 'react'\nimport { GithubFilled } from '@ant-design/icons';\nimport { Button } from 'antd';\n\nconst Footer = () => {\n    return (\n        <div className=\"contact\">\n\n            <a href=\"mailto:fuzzychenming@gmail.com\">\n                <Button type='default'>\n                    Contact me\n                     </Button>\n            </a>\n            <a href=\"https://github.com/FuzzyChen\" className='giticon'>\n                <GithubFilled />\n            </a>\n\n        </div>\n    )\n}\n\nexport default Footer","import React from 'react';\nimport './App.css';\nimport Nav from './components/Navigation'\nimport Experience from './components/Experience'\nimport About from './components/About'\nimport Foot from './components/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <About />\n      <Experience />\n      <Foot />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}